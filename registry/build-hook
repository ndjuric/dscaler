#! /usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import json
import logging
import requests

from subprocess import Popen
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
from BaseHTTPServer import BaseHTTPRequestHandler
from BaseHTTPServer import HTTPServer as HTTPServer

logging.basicConfig(format='%(asctime)s %(levelname)s %(message)s', level=logging.DEBUG, stream=sys.stdout)


class RequestHandler(BaseHTTPRequestHandler):
    """A POST request handler which expects a token in its path."""

    def do_POST(self):
        logging.info("Path: %s", self.path)
        header_length = int(self.headers.getheader('content-length', "0"))
        json_payload = self.rfile.read(header_length)
        env = dict(os.environ)
        json_params = {}
        if len(json_payload) > 0:
            json_params = json.loads(json_payload)
            env.update(('REPOSITORY_' + var.upper(), str(val)) for var, val in json_params['repository'].items())

        # Check if the secret URL was called
        token = args.token or os.environ.get("DOCKER_AUTH_TOKEN")
        if token == self.path[1:]:
            logging.info("Start executing '%s'" % args.cmd)
            try:
                Popen(args.cmd, env=env).wait()
                self.send_response(200, "OK")
                state = 'success'
                description = 'Ok.'
            except OSError as err:
                self.send_response(500, "OSError")
                logging.error("You probably didn't use 'sh ./script.sh'.")
                logging.error(err)
                state = 'failure'
                description = str(err)

            if 'callback_url' in json_params:
                data = {'state': state, 'description': description}
                headers = {'Content-type': 'application/json', 'Accept': 'text/plain'}
                requests.post(json_params['callback_url'], data=json.dumps(data), headers=headers)
        else:
            self.send_response(401, "Not authorized")
        self.end_headers()


def get_parser():
    """Get a command line parser for docker-hook."""
    parse = ArgumentParser(description=__doc__,
                           formatter_class=ArgumentDefaultsHelpFormatter)

    parse.add_argument("-t", "--token",
                       dest="token",
                       required=False,
                       help=("Secure auth token (can be choosen "
                             "arbitrarily)"))
    parse.add_argument("-c", "--cmd",
                       dest="cmd",
                       required=True,
                       nargs="*",
                       help="Command to execute when triggered")
    parse.add_argument("--addr",
                       dest="addr",
                       default="0.0.0.0",
                       help="address where it listens")
    parse.add_argument("--port",
                       dest="port",
                       type=int,
                       default=8555,
                       metavar="PORT",
                       help="port where it listens")
    return parse


def main(addr, port):
    httpd = HTTPServer((addr, port), RequestHandler)
    httpd.serve_forever()


if __name__ == '__main__':
    parser = get_parser()
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)
    args = parser.parse_args()
    main(args.addr, args.port)
